{"version":3,"sources":["Header.js","AppReducer.js","GlobalState.js","Balance.js","Income.js","Transaction.js","TransactionList.js","AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","Income","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a427d23.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h2>Expense Tracker</h2>\r\n    );\r\n};\r\n\r\nexport default Header;","export default (state, action)=>{\r\n    switch(action.type){\r\n        case 'DELETE_TRANSACTION':\r\n            return{\r\n                ...state, \r\n                transactions: state.transactions.filter(transaction=> transaction.id !== action.payload)\r\n            }\r\n\r\n            case 'ADD_TRANSACTION':\r\n                return{\r\n                    ...state,\r\n                    transactions: [action.payload, ...state.transactions]\r\n                }\r\n        default: \r\n        return state\r\n    }\r\n}","import React, {createContext, useReducer} from 'react'\r\nimport AppReducer from './AppReducer'\r\n\r\n//Initial state\r\n\r\nconst initialState = {\r\n    transactions : []\r\n        \r\n}\r\n\r\n//create context\r\nexport const  GlobalContext = createContext(initialState)\r\n\r\n//PROVIDER COMPONENT\r\nexport const GlobalProvider =({children}) =>{\r\n    const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n//actions\r\n\r\nfunction deleteTransaction(id){\r\n    dispatch({\r\n        type: 'DELETE_TRANSACTION',\r\n        payload: id\r\n    })\r\n}\r\n\r\n\r\nfunction addTransaction(transaction){\r\n    dispatch({\r\n        type: 'ADD_TRANSACTION',\r\n        payload: transaction\r\n    })\r\n}\r\n    return (\r\n        <GlobalContext.Provider value = {{\r\n            transactions: state.transactions,\r\n            deleteTransaction,\r\n            addTransaction\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","\r\nimport React, { useContext } from 'react';\r\nimport {GlobalContext} from './GlobalState'\r\n\r\nconst Balance = () => {\r\n    const {transactions} = useContext(GlobalContext )\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n    return (\r\n        <>\r\n        <h4>Your Balance</h4>\r\n    <h1 id = \"balance\">${total}</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Balance;","\r\nimport React, { useContext }  from 'react';\r\nimport {GlobalContext} from './GlobalState'\r\n\r\nconst Income = () => {\r\n  const {transactions}  = useContext(GlobalContext)\r\n\r\n  const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n\r\n  const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = (\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2);\r\n\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n        <div>\r\n          <h4>Income</h4>\r\n          <p  className=\"money plus\">{income}</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n          <p  className=\"money minus\">{expense}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Income;","\r\nimport React, { useContext } from 'react';\r\nimport {GlobalContext} from './GlobalState'\r\n\r\nconst Transaction = ({transaction}) => {\r\n    const { deleteTransaction} = useContext(GlobalContext)\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n    return(\r\n        <div>\r\n             <li className={transaction.amount <0 ? \"minus\" :\"plus\"}>\r\n             \r\n             {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span>\r\n             <button  onClick = {()=>deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n           </li> \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Transaction;","\r\nimport React, { useContext } from 'react';\r\nimport {GlobalContext} from './GlobalState'\r\nimport Transaction from './Transaction';\r\n\r\n\r\nconst TransactionList = () => {\r\n    const {transactions}  = useContext(GlobalContext)\r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n      <ul className=\"list\">\r\n      {transactions.map(transaction =>(\r\n         <Transaction key = {transaction.id} transaction = {transaction}/>\r\n                 \r\n       ) )}\r\n         \r\n      </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionList;","\r\nimport React, { useState, useContext } from 'react';\r\nimport {GlobalContext} from './GlobalState'\r\n\r\nconst AddTransaction = () => {\r\n  const { addTransaction} = useContext(GlobalContext)\r\n\r\nconst [text, setText] = useState('')\r\nconst[amount, setAmount] = useState(0)\r\n\r\nconst handleSubmit = e=>{\r\n  e.preventDefault()\r\n\r\n  const newTransaction   = {\r\n    id: Math.floor(Math.random() * 100000000),\r\n    text: text,\r\n    amount: +amount\r\n  }\r\n  addTransaction(newTransaction)\r\n}\r\n    return (\r\n        <>\r\n            <h3>Add new transaction</h3>\r\n      <form onSubmit ={handleSubmit} >\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Enter your text...</label>\r\n          <input type=\"text\"  value= {text} onChange={(e)=>setText(e.target.value)} placeholder=\"Enter text...\" />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\"\r\n            >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n          >\r\n          <input type=\"number\"  value= {amount} onChange={(e)=>setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTransaction;","import React from 'react';\nimport './App.css';\nimport Header from './Header'\nimport Balance from './Balance'\nimport Income from './Income'\nimport TransactionList from './TransactionList'\nimport AddTransaction from './AddTransaction';\nimport  { GlobalProvider } from './GlobalState'\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      \n    <Header/>\n    <div className = \"container\">\n      <Balance />\n      <Income/>\n      <TransactionList/>\n      <AddTransaction/>\n    </div>\n\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}